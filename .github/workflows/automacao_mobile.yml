name: Android Emulator Tests (ARM64)

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  robot-tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60

    steps:

    # PHASE 0: GIT LFS SETUP
      - name: 🔍 Setup Git LFS
        uses: actions/checkout@v4
        with:
          lfs: true  # This is crucial
          submodules: recursive

      - name: 🛠️ Verify LFS Files
        run: |
          # Check if file is LFS pointer
          if file ./apps/app.apk | grep -q "ASCII text"; then
            echo "❌ Error: APK is an LFS pointer, not pulled properly"
            git lfs install
            git lfs pull
            echo "After pull, file type: $(file ./apps/app.apk)"
            exit 1
          fi
          
          # Verify actual APK
          if ! unzip -t ./apps/app.apk >/dev/null 2>&1; then
            echo "❌ Error: Invalid APK after LFS pull"
            echo "File info:"
            file ./apps/app.apk
            echo "First bytes:"
            xxd -l 100 ./apps/app.apk
            exit 1
          fi
          echo "✅ APK verified"

      # PHASE 1: SETUP
      - name: 🏗️ Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: 🧾 Checkout Code
        uses: actions/checkout@v4

      - name: 🔍 Verify APK
        run: |
          if [ ! -f ./apps/app.apk ]; then
            echo "❌ Error: APK file not found at ./apps/app.apk"
            exit 1
          fi
          
          echo "APK Info:"
          file ./apps/app.apk
          echo "Size: $(du -h ./apps/app.apk | cut -f1)"
          
          if ! unzip -t ./apps/app.apk >/dev/null 2>&1; then
            echo "❌ Error: Invalid APK - Not a valid ZIP archive"
            echo "First bytes:"
            xxd -l 100 ./apps/app.apk
            exit 1
          fi
          
          if ! unzip -l ./apps/app.apk | grep -q 'lib/'; then
            echo "⚠️ Warning: No native libraries found in APK"
          fi
          
          echo "✅ APK appears valid"

      - name: 🐳 Build Docker Image
        run: docker build -t android-tests .

      # PHASE 2: CONTAINER START
      - name: 🚀 Launch Test Environment
        run: |
          mkdir -p ./results
          
          docker run \
            --name test-container \
            -p 4723:4723 \
            -p 5554:5554 \
            -p 5555:5555 \
            -e TZ=UTC \
            --device /dev/kvm \
            --cap-add=NET_ADMIN \
            --shm-size=2g \
            -d \
            android-tests

      # PHASE 3: SERVICE VERIFICATION
      - name: 🔍 Verify Services
        run: |
          # Wait for emulator
          echo "Waiting for emulator..."
          timeout 3m bash -c '
            while ! docker exec test-container adb shell getprop sys.boot_completed 2>/dev/null | grep -q "1"; do
              echo "Emulator not ready yet..."
              sleep 5
            done'
          
          # Check architecture
          ARCH=$(docker exec test-container adb shell getprop ro.product.cpu.abi)
          echo "Detected architecture: $ARCH"
          if [[ "$ARCH" != "arm64-v8a" ]]; then
            echo "❌ Wrong architecture detected!"
            exit 1
          fi
          
          # Verify APK installation
          if ! docker exec test-container adb shell pm list packages | grep -q your.package.name; then
            echo "❌ APK not installed!"
            docker exec test-container cat /app/appium.log | tail -n 50
            exit 1
          fi
          
          # Verify Appium
          timeout 2m bash -c '
            while ! docker exec test-container curl -s http://localhost:4723/wd/hub/status | grep -q "status.*0"; do
              echo "Appium not ready yet..."
              sleep 5
            done'
          
          echo "✅ All services ready!"

      # PHASE 4: TEST EXECUTION
      - name: 🧪 Run Tests
        run: |
          docker exec test-container /bin/bash -c "\
            source ./venv/bin/activate && \
            robot --outputdir /app/test_results /app/test_cases"
          
          docker cp test-container:/app/test_results ./results/ 2>/dev/null || true

      # PHASE 5: LOG COLLECTION
      - name: 📖 Gather Logs
        if: always()
        run: |
          docker logs test-container > container.log 2>&1
          docker exec test-container cat /app/appium.log > appium.log 2>/dev/null || true
          docker exec test-container adb logcat -d > adb.log 2>/dev/null || true

      - name: 📤 Upload Artifacts
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            results/
            *.log

      # PHASE 6: CLEANUP
      - name: 🧹 Cleanup
        if: always()
        run: |
          docker rm -f test-container 2>/dev/null || true