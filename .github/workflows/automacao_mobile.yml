name: Continuous Integration

on:
  push:
  workflow_dispatch:

jobs:
  execute_test:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Get root directory
        id: root
        run: echo "ROOT=$(pwd)" >> $GITHUB_ENV

      - name: Use Python 3.9
        uses: actions/setup-python@v5
        with:
          python-version: 3.9
          cache: 'pip'

      - name: Install Robot Framework and dependencies
        run: |
          pip install robotframework
          pip install robotframework-appiumlibrary
          pip install -r ${{ env.ROOT }}/requirements.txt

      - name: Set up Java
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Setup Android SDK
        uses: android-actions/setup-android@v3
        with:
          android-sdk-file: commandlinetools-linux-9477386_latest.zip

      - name: Accept licenses and install tools
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "emulator" "platforms;android-34"
          sdkmanager "system-images;android-34;google_apis;x86_64"
          echo "$ANDROID_HOME/emulator" >> $GITHUB_PATH
          echo "$ANDROID_HOME/platform-tools" >> $GITHUB_PATH

      - name: Create AVD
        run: |
          echo no | avdmanager create avd -n "Pixel_7_Pro_API_34" -k "system-images;android-34;google_apis;x86_64" --device "pixel_7_pro"

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 'lts/*'

      - name: Install Appium
        run: |
          npm install -g appium
          appium driver install uiautomator2

      - name: Start Appium server
        run: |
          nohup appium -p 4725 -pa /wd/hub --log-timestamp --local-timezone > ${{ env.ROOT }}/appium.log 2>&1 &
          sleep 5
          cat ${{ env.ROOT }}/appium.log

      - name: Run tests
        run: |
          # Start emulator
          emulator -avd Pixel_7_Pro_API_34 -no-audio -no-window -no-snapshot -no-boot-anim &
          adb wait-for-device
          
          # Wait for device to be fully booted
          adb shell 'while [[ -z $(getprop sys.boot_completed) ]]; do sleep 1; done; input keyevent 82'
          
          # Install APK
          adb install -t -g ${{ env.ROOT }}/apps/app.apk
          
          # Run tests
          robot -d ${{ env.ROOT }}/reports -v APPIUM_PORT:4725 -v APK_PATH:${{ env.ROOT }}/apps/app.apk ${{ env.ROOT }}/test_cases/

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: reports
          path: ${{ env.ROOT }}/reports